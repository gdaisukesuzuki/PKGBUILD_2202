# Maintainer: Sven-Hendrik Haase <svenstaro@gmail.com>
# Contributor: bartus <arch-user-repoá˜“bartus.33mail.com>
# Contributor: pingplug <pingplug@foxmail.com>
# Contributor: cornholio <vigo.the.unholy.carpathian@gmail.com>

pkgname=(cudf python-cudf)
_pkgname=cudf
# pkgver=0.19.2
pkgver=22.02
_pkgver=21.12.02
# _pkgver=0.19.2
pkgrel=0
pkgdesc="RAPIDS Memory Manager"
arch=('x86_64')
url="https://rapids.ai/"
license=('custom')
# depends=('arrow-cuda>=3.0.0' 'nccl' 'cuda' 'cmake' 'boost-libs'  'protobuf' )
# depends=('nccl' 'cuda' 'cmake' 'boost-libs')
depends=( 'nvcomp' 'rmm'  'nccl' 'cuda' 'cmake' 'boost-libs')
# depends=('nvcomp' 'rmm' 'arrow-cuda'  'nccl' 'cuda' 'cmake' 'boost-libs')
# depends=('arrow-cuda' 'rmm' 'nccl' 'cuda' 'cmake' 'boost-libs')
# depends=('arrow-cuda>=1.0.0' 'nccl' 'cuda' 'cmake' 'rmm' 'dlpack' 'boost-libs'  'protobuf' )
# provides=('cudf' )
# depends=('arrow-cuda>=1.0.0' 'nccl' 'cuda' 'cuda-tools' 'cuda-static' 'cmake' 'python-rmm' 'dlpack' 'boost-libs'  'protobuf' )
# depends=('arrow-cuda<1.0.0' 'python-pyarrow-cuda' 'gcc9' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs' 'python-dask'  'python-distributed' 'protobuf' 'python-versioneer')
# depends=('arrow-cudf<0.16.0' 'gcc8' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs' 'python-dask'  'python-distributed' 'protobuf')
# makedepends=('python-cmake_setuptools' 'protobuf-static')
# depends=('arrow-cudf<0.16.0' 'gcc8' 'cuda' 'cmake' 'rapids-rmm' 'dlpack' 'boost-libs')
# source=("${_pkgname}::git+https://github.com/rapidsai/cudf.git#branch=branch-${_pkgver}"
# source=("${_pkgname}::git+https://github.com/rapidsai/cudf.git"
# source=("${_pkgname}::git+https://github.com/rapidsai/cudf.git#branch=branch-${_pkgver}"
# source=("${_pkgname}::git+https://github.com/rapidsai/cudf.git#tag=v${_pkgver}"
source=("${_pkgname}::git+https://github.com/rapidsai/cudf.git#branch=branch-22.02"
 "cu.patch"
 "cc.patch"
 "cmake.patch"
# "https://anaconda.org/rapidsai/libcudf/21.08.02/download/linux-64/libcudf-21.08.02-cuda11.4_gf6d31fa95d_0.tar.bz2"
# "build.sh.patch"
#  "bench.patch"
#  "binop.patch"
  "setup.py.patch"
)
#  "orc.hpp.patch"
#  "remove_keys.cu.patch"
#  "from.arrow.cu.patch"
#  "cudf_setup.py.patch" "gather.cu.patch" "ipc.cpp.patch" "reader_impl.cu.patch")
#  "cudf_setup.py.patch" "nvst_CMakeLists.txt.patch")
#  "from_arrow.cpp.patch"

# sha256sums=('SKIP' 'SKIP')
# sha256sums=('SKIP')
# sha256sums=('SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP')
sha256sums=('SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP')
options=('staticlibs')


prepare() {
  cd "${srcdir}"/cudf
git submodule update --init --recursive
  cd "${srcdir}"
  patch -p0 < cu.patch
 patch -p0 < cc.patch
# patch -p0 < binop.patch
#  patch -p0 < build.sh.patch
  patch -p0 < cmake.patch
  patch -p0 < setup.py.patch
#   patch -p0 < nvst_CMakeLists.txt.patch
#   patch -p0 < gather.cu.patch 
#   patch -p0 < orc.hpp.patch 
#  patch -p0 < cpp.patch
#  patch -p0 < cudf_setup.py.patch
#  patch -p0 < from_arrow.cpp.patch
#   patch -p0 < reader_impl.cu.patch
#   patch -p0 <  from.arrow.cu.patch
#    patch -p0 < ipc.cpp.patch
export CC=/usr/bin/gcc
export CXX=/usr/bin/g++
    export SNAPPY_INCLUDE_DIRS=/usr/include
    export OPENSSL_ROOT_DIR=/usr
    export LIB_CUDF_BUILD_DIR="${srcdir}"/cudf/cpp/build

}

build() {
  cd "${srcdir}/cudf"
#    ./build.sh clean
#  ./build.sh --disable_nvtx -v -n libcudf cudf dask_cudf
# PARALLEL_LEVEL=3 ./build.sh -v -n libcudf 
#  -DCMAKE_CXX_STANDARD="14" \
#  -DCMAKE_CXX_STANDARD_REQUIRED=ON \
#  -DCMAKE_CXX_EXTENSIONS=OFF \ 

    cmake -S "${srcdir}"/cudf/cpp -B "${srcdir}"/cudf/cpp/build \
          -DCMAKE_INSTALL_PREFIX="/usr" \
          -DCMAKE_CUDA_ARCHITECTURES= \
          -DCMAKE_CUDA_HOST_COMPILER=/usr/bin/g++-10 \
          -DCMAKE_C_COMPILER=/usr/bin/gcc \
          -DCMAKE_CXX_COMPILER=/usr/bin/g++ \
          -DOPENSSL_CRYPTO_LIBRARY=/usr/lib/libcrypto.so \
          -DUSE_NVTX=ON \
          -DBUILD_TESTS=OFF \
          -DBUILD_BENCHMARKS=OFF \
          -DDISABLE_DEPRECATION_WARNING=ON \
         -DCMAKE_CXX_STANDARD=17 \
          -DPER_THREAD_DEFAULT_STREAM=ON \
          -DCMAKE_BUILD_TYPE=Release 
          # -DCUDF_USE_ARROW_STATIC=ON \

    
    cd "${srcdir}"/cudf/cpp/build
    find . -name flags.make | xargs  sed -i -e 's/--generate-code=arch=compute_60,code=\[sm_60\] --generate-code=arch=compute_70,code=\[sm_70\] --generate-code=arch=compute_75,code=\[sm_75\] --generate-code=arch=compute_80,code=\[sm_80\]/--generate-code=arch=compute_86,code=\[sm_86\]/g'
    find . -name flags.make | xargs  sed -i -e 's/--generate-code=arch=compute_60,code=\[compute_60,sm_60\] --generate-code=arch=compute_70,code=\[sm_70\] --generate-code=arch=compute_75,code=\[sm_75\] --generate-code=arch=compute_80,code=\[compute_80,sm_80\]/--generate-code=arch=compute_86,code=\[sm_86\]/g'

  # cmake --build . -j$(nproc) -v
  # cd "${srcdir}"/cudf/cpp/build/_deps/rmm-src/include
  # rm -rf rm
  # cp -pr /usr/include/rmm .

  # patch -p0 < bench.patch

#  ./build.sh -v -n libcudf # cudf
#   ./build.sh -v -n libcudf
#  ./build.sh -v -n libcudf

}

package_cudf() {
  cd "${srcdir}"/cudf/cpp/build

  # make DESTDIR="${pkgdir}" install_cudf
  export PARALLEL_LEVEL=2
  # export CUB_NS_QUALIFIER="::cub"

  # cmake --build . -j1 --target install DESTDIR="${pkgdir}"  -v
  # make  install DESTDIR="${pkgdir}/usr"
  # cmake --build . -j$(nproc) --target install DESTDIR="${pkgdir}"  -v
  # cmake --build . -j1 --target install DESTDIR="${pkgdir}"  -v
#  cd "${srcdir}"/cudf/python/cudf
  # CUDA_HOME=/opt/cuda LD_LIBRARY_PATH=/opt/cuda/lib64:${LD_LIBRARY_PATH} python setup.py build_ext -j${PARALLEL_LEVEL:-1} --library-dir=${srcdir}/cudf/cpp/build install --single-version-externally-managed --record=record.txt --prefix=/usr --root="${pkgdir}"

  make -j12 -C .  DESTDIR="${pkgdir}" install


  install -Dm644 ${srcdir}/cudf/LICENSE ${pkgdir}/usr/share/licenses/cudf/LICENSE
  rm -rf ${pkgdir}/usr/lib/cmake/rmm
  rm -rf ${pkgdir}/usr/include/rmm
  # rm -rf ${pkgdir}/usr/include/libcudf
  # rm -rf ${pkgdir}/usr/include/rapids
   rm -rf ${pkgdir}/usr/include/rapids/thrust
  # mv ${pkgdir}/usr/include/rapids/thrust ${pkgdir}/usr/include/rapids/dummy
  # mv ${pkgdir}/usr/include/rapids/dummy/thrust ${pkgdir}/usr/include/rapids/thrust
  # rmdir ${pkgdir}/usr/include/rapids/dummy
  rm -rf ${pkgdir}/usr/include/nvcomp
  rm -rf ${pkgdir}/usr/include/nvcomp.h
  rm -rf ${pkgdir}/usr/include/nvcomp.hpp
  
  rm -rf ${pkgdir}/usr/include/rapids/thrust
  # rm -rf ${pkgdir}/usr/include/cuco
  rm -rf ${pkgdir}/usr/lib/cmake/nvcomp
  # rm -rf ${pkgdir}/usr/lib/cmake/cuco
  rm -rf ${pkgdir}/usr/lib/cmake/cub
  # rm -rf ${pkgdir}/usr/lib/cmake/libcudacxx
  rm -rf ${pkgdir}/usr/lib/cmake/thrust
  rm ${pkgdir}/usr/lib/libnvcomp.a
  # install -Dm755 ${srcdir}/lib/libcudf.so ${pkgdir}/usr/lib
  # install -Dm644 ${srcdir}/lib/libcudftestutil.a ${pkgdir}/usr/lib

}

package_python-cudf()
{
  # depends=('cudf' 'python-cupy' 'python-rmm' 'python-dask-cuda' 'python-nvtx' 'python-raft' )
  depends=('cudf' 'python-cupy' 'python-rmm' 'python-pyarrow' 'python-dask-cuda' 'python-nvtx' )

  cd "${srcdir}"/cudf/python/cudf
  
  export LD_LIBRARY_PATH=/opt/cuda/lib64:$LD_LIBRARY_PATH
  CMAKE_CUDA_HOST_COMPILER=/usr/bin/g++-10 \
  PARALLEL_LEVEL=${PARALLEL_LEVEL} python setup.py build_ext -j12 --library-dir=${LIB_CUDF_BUILD_DIR} install --single-version-externally-managed --record=record.txt --prefix=/usr --root="${pkgdir}" --optimize=1

  cd "${srcdir}"/cudf/python/dask_cudf
  CMAKE_CUDA_HOST_COMPILER=/usr/bin/g++-10 \
  PARALLEL_LEVEL=${PARALLEL_LEVEL} python setup.py build_ext -j12 --library-dir=${LIB_CUDF_BUILD_DIR} install --single-version-externally-managed --record=record.txt --prefix=/usr --root="${pkgdir}" --optimize=1

  # install -Dm644 ${srcdir}/cudf/cpp/src/utilities/legacy/*.hpp ${pkgdir}/usr/include/cudf/utilities/legacy/
  install -Dm644 ${srcdir}/cudf/LICENSE ${pkgdir}/usr/share/licenses/python-cudf/LICENSE
}




# vim:set ts=2 sw=2 et:
